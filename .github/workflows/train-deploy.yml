name: Train, Build, and Deploy to AWS ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
  ECS_CLUSTER_NAME: ${{ secrets.ECS_CLUSTER_NAME }}
  ECS_SERVICE_NAME: ${{ secrets.ECS_SERVICE_NAME }}
  IMAGE_TAG: ${{ github.sha }}

jobs:
  train-build-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v3

    - name: 🐍 Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: 📦 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install python-dotenv boto3 mlflow

    - name: 🤖 Run ML training script
      run: python train.py

    - name: 🔐 Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: 🔐 Login to Amazon ECR
      uses: aws-actions/amazon-ecr-login@v1

    - name: 🐳 Build and Push Docker image to ECR
      run: |
        docker build -t ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }} .
        docker push ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}

    - name: Register new ECS task definition
      id: register-task
      run: |
        TASK_DEF_ARN=$(aws ecs register-task-definition \
          --family walmart-task \
          --container-definitions '[{
            "name": "walmart-container",
            "image": "'"${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}"'",
            "essential": true,
            "portMappings": [{
              "containerPort": 8000,
              "protocol": "tcp"
            }]
          }]' \
          --region ${{ env.AWS_REGION }} \
          --query 'taskDefinition.taskDefinitionArn' \
          --output text)
        echo "TASK_DEFINITION_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV

    - name: 🚀 Deploy updated task definition to ECS
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ env.TASK_DEFINITION_ARN }}
        service: ${{ env.ECS_SERVICE_NAME }}
        cluster: ${{ env.ECS_CLUSTER_NAME }}
        wait-for-service-stability: true
        aws-region: ${{ env.AWS_REGION }}
